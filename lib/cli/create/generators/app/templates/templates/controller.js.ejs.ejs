<%%
var ControllerName = name.charAt(0).toUpperCase() + name.slice(1);
-%%>
import AppController from './app-controller';
import <%%=ControllerName%%> from '../models/<%%=name.toLowerCase()%%>';
//TODO: doc url
//auto-generated controller for <%%=name%%>
class <%%=ControllerName%%>Controller extends AppController{
	constructor(){
		super();
	}
<%% for (var method of methods.entries()){-%%>
<%% if (method[1].isFramework){-%%>
<%% switch(method[0]){
case 'create':-%%>

	async create(params){
		await new <%%=ControllerName%%>(params).save();
	}
<%%break
case 'read':-%%>

	async read(params){
		await <%%=ControllerName%%>.get(params.id);
	}
<%%break
case 'readList':-%%>

	async readList(params){
		this.list = await <%%=ControllerName%%>.get(params).sort().skip(params.skip).limit(params.limit);
		this.count = await <%%=ControllerName%%>.get(params).sort().skip(params.skip).limit(params.limit).count();
	}
<%%break
case 'update':-%%>

	async update(params){
		await new <%%=ControllerName%%>(params).save();
	}
<%%break;
case 'delete':-%%>

	async delete(params){
		await <%%=ControllerName%%>.get(params.id).delete();
	}
<%%break
default:

break
}-%%>
<%% } else {-%%>

	async <%%=method[0]%%>(params){

	}
<%% } -%%>
<%% } -%%>
}

export default <%%=ControllerName%%>Controller;
